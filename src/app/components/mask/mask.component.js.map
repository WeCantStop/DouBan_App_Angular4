{"version":3,"sources":["../../src/mask/mask.component.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAA,EAAW,KAAA,EAAO,YAAA,EAAc,MAAA,EAAkB,MAAO,eAAA,CAAgB;AAClF,OAAO,EAAE,UAAA,EAAsB,YAAA,EAAa,MAAO,SAAA,CAAU;AAG7D;IAAA;QACI;;;;WAIG;QACF,aAAQ,GAAY,KAAK,CAAC;QAE3B;;WAEG;QACF,UAAK,GAAG,IAAI,YAAY,EAAE,CAAC;QAG5B,WAAM,GAAY,KAAK,CAAC;IA4D5B,CAAC;IA1DG;;OAEG;IACH,4BAAI,GAAJ;QAAA,iBAOC;QANG,UAAU,CAAC;YACP,KAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACvB,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC,UAAC,QAAwB;YAC9C,KAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC7B,CAAC,CAAC,CAAC;IACP,CAAC;IAED;;;;OAIG;IACH,4BAAI,GAAJ,UAAK,WAA4B;QAA5B,4BAAA,EAAA,mBAA4B;QAC7B,EAAE,CAAC,CAAC,WAAW,KAAK,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC;YAAC,MAAM,CAAC,KAAK,CAAC;QAElE,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAClB,UAAU,CAAC;QACX,CAAC,EAAE,GAAG,CAAC,CAAC;IACZ,CAAC;IAED,mCAAW,GAAX;QACI,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,CAAC,QAAQ,YAAY,YAAY,CAAC,CAAC,CAAC;YAC1C,IAAI,CAAC,QAAS,CAAC,WAAW,EAAE,CAAC;QAChD,CAAC;IACL,CAAC;IA4BL,oBAAC;AAAD,CA1EA,AA0EC;;AA1BM,wBAAU,GAA0B;IAC3C,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC;gBACtB,QAAQ,EAAE,WAAW;gBACrB,QAAQ,EAAE,sGAAgG;gBAC1G,MAAM,EAAE;oBACJ,mPAUC;iBACJ;aACJ,EAAG,EAAE;CACL,CAAC;AACF,kBAAkB;AACX,4BAAc,GAAmE,cAAM,OAAA,EAC7F,EAD6F,CAC7F,CAAC;AACK,4BAAc,GAA2C;IAChE,UAAU,EAAE,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,EAAE;IAC9B,OAAO,EAAE,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE;CAC3B,CAAC","file":"mask.component.js","sourceRoot":"","sourcesContent":["import { Component, Input, EventEmitter, Output, OnDestroy } from '@angular/core';\nimport { Observable, Observer, Subscription } from 'rxjs/Rx';\n\n\nexport class MaskComponent implements OnDestroy {\n    /**\n     * 点击是否允许关闭（默认：false）\n     *\n     * @type {boolean}\n     */\n     backdrop: boolean = false;\n\n    /**\n     * 关闭回调\n     */\n     close = new EventEmitter();\n\n    private observer: Observer<void>;\n    _shown: boolean = false;\n\n    /**\n     * 显示，并返回一个Observable\n     */\n    show(): Observable<void> {\n        setTimeout(() => {\n            this._shown = true;\n        });\n        return Observable.create((observer: Observer<void>) => {\n            this.observer = observer;\n        });\n    }\n\n    /**\n     * 隐藏\n     *\n     * @param {boolean} [is_backdrop=false] 是否手动点击关闭（默认：false）\n     */\n    hide(is_backdrop: boolean = false) {\n        if (is_backdrop === true && this.backdrop === false) return false;\n\n        this._shown = false;\n        this.close.emit();\n        setTimeout(() => {\n        }, 300);\n    }\n\n    ngOnDestroy(): void {\n        if (this.observer && this.observer instanceof Subscription) {\n            (<Subscription>this.observer).unsubscribe();\n        }\n    }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Component, args: [{\n    selector: 'weui-mask',\n    template: `<div class=\"weui-mask\" [ngClass]=\"{'weui-mask--visible': _shown }\" (click)=\"hide(true)\"></div>`,\n    styles: [\n        `\n        .weui-mask {\n            opacity: 0;\n            visibility: hidden;\n            transition-duration: .3s;\n        }\n        .weui-mask--visible {\n            opacity: 1;\n            visibility: visible;\n        }\n        `\n    ]\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'backdrop': [{ type: Input },],\n'close': [{ type: Output },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}